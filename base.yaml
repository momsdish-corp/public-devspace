version: v2beta1
name: devspace

functions:
  ##################
  # Core Functions #
  ##################

  #
  # Require variables to be set
  #
  # Parameters
  # ----------
  # $REQUIRE_VARS
  #   (string) Array of variables to check
  require_vars: |-
    REQUIRE_VARS=("${@}")
    for REQUIRE_VAR in ${REQUIRE_VARS[@]}; do
      [[ ! "${!REQUIRE_VAR}" ]] \
        && echo "Error! $REQUIRE_VAR is not set. Exiting..." \
        && exit 1
      required_dummy=""
    done
  #
  # Must be run at the beginning of every function that doesn't return a specific value
  #
  function_init: |-
    require_vars PIPELINE_NAME FUNCTION_NAME
    [ -z $SILENT_MODE ] && echo ">> $PIPELINE_NAME > ${FUNCTION_NAME}($FUNCTION_ARGS): Starting"
  #
  # Log function messages
  #
  # Parameters
  # ----------
  # $MESSAGE
  #   (string) Message to log
  function_print: |-
    # Required variables
    require_vars PIPELINE_NAME FUNCTION_NAME
    
    # Args
    MESSAGE="$1" && require_vars MESSAGE
    
    # Print message
    echo ">> $PIPELINE_NAME > ${FUNCTION_NAME}: $MESSAGE"
  #
  # Must be run at the beginning of every pipeline
  #
  # Example:
  #   $PIPELINE_NAME my-pipeline
  #   $PIPELINE_FLAGS="$(pipeline_print_flags flag1 flag2)"
  #   pipeline_init
  #
  pipeline_init: |-
    # Required variables
    require_vars PIPELINE_NAME APP_NAME
    
    # Print pipeline start message
    echo ">> $PIPELINE_NAME $FLAGS: Starting"
    
    # Validate the app name
    SILENT_MODE=true && validate_namespace "${APP_NAME}" && SILENT_MODE=""
    
    # Enforce $APP_NAME as namespace
    if [ ${APP_NAME} != ${DEVSPACE_NAMESPACE} ]; then
      # Do not switch the namespace here, as it will still save the original deployment under the wrong namespace, causing things like `devspace purge` not to work
      # Instead require the person to manually switch the namespace
      echo ">> $PIPELINE_NAME: Error! Before running this command, you must switch to the correct namespace by running 'devspace use namespace ${APP_NAME}'."
      exit 1
    fi
  #
  # Log pipeline messages
  #
  # Parameters
  # ----------
  # $MESSAGE
  #   (string) Message to show
  pipeline_print: |-
    # Required variables
    require_vars PIPELINE_NAME
    
    # Args
    MESSAGE="$1" && require_vars MESSAGE
    
    echo ">> $PIPELINE_NAME: $MESSAGE"
  #
  # Print pipeline flags. Used by pipelines to declare the command.
  #
  # Example: pipeline_start my-pipeline $(pipeline_print_flags non-hidden-flag -hidden-flag)
  #
  # Parameters
  # ----------
  # $FLAG_NAMES
  #   (string) Array of flag names to print. If the flag name begins with a dash, the value will be hidden.
  #
  pipeline_print_flags: |-
    FLAG_NAMES="$@"
    FLAGS=""
    for FLAG_NAME in $FLAG_NAMES; do
      # If the flag value is empty, skip it
      [[ -n $FLAG_VALUE ]] && continue
      # If the flag name begins with a dash, hide the value
      if [[ $FLAG_NAME == -* ]]; then
        FLAG_NAME="${FLAG_NAME:1}" # Remove the dash
        IS_HIDDEN=true
      else
        IS_HIDDEN=false
      fi
      # Build Output
      if [[ $IS_HIDDEN == true ]]; then
        FLAGS="${FLAGS}--$FLAG_NAME==*** "
      else
        FLAG_VALUE=$(get_flag $FLAG_NAME)
        FLAGS="${FLAGS}--$FLAG_NAME=$FLAG_VALUE "
      fi
    done

    echo "$FLAGS"
  #####################
  # General Functions #
  #####################

  #
  # Wait for the pod to be ready. If not ready, it will output all logs and exit with an error.
  #
  # Parameters
  # ----------
  # $POD_NAME
  #   (string) Name of the pod to wait for
  # $TIMEOUT
  #   (int) (Optional) Timeout in seconds
  #   Default value: 60
  #
  wait_for_pod_ready_or_debug: |-
    FUNCTION_NAME="wait_for_pod_ready_or_debug"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # Define variables
    POD_NAME="$1" && require_vars POD_NAME
    TIMEOUT=${2:-60}

    # Wait for the pod to be ready
    function_print "Waiting for pod $POD_NAME condition to be ready"
    if ! kubectl wait --namespace=${APP_NAME} --for=condition=Ready pod/$POD_NAME --timeout=${TIMEOUT}s > /dev/null 2>&1; then
      function_print "Error! Pod $POD_NAME failed to start."
      if ! kubectl get pod --namespace=${APP_NAME} $POD_NAME --output name > /dev/null 2>&1; then
        function_print  "Error! Pod $POD_NAME not found."
        exit 1
      else
        function_print "Printing debug pod/$POD_NAME"
        kubectl_describe $POD_NAME "$THIS_COMMAND"
        kubectl_logs $POD_NAME all "$THIS_COMMAND"
        kubectl_describe $POD_NAME "$THIS_COMMAND"
        kubectl_status $POD_NAME "$THIS_COMMAND"
        kubectl_events "$THIS_COMMAND"
        exit 1
      fi
    fi
  #
  # Wait for the pod to be ready for exec. If not ready, it will output all logs and exit with an error.
  #
  # Parameters
  # ----------
  # $POD_NAME
  #   (string) Name of the pod to wait for
  # $CONTAINER_NAME
  #   (string) Name of the container to wait for
  # $CONTAINER_TYPE
  #   (string) (Optional) Type of the container to wait for, i.e. initContainer, container
  #   Default value: container
  # $TIMEOUT
  #   (int) (Optional) Timeout in seconds
  #   Default value: 60
  #
  wait_for_pod_exec_or_debug: |-
    FUNCTION_NAME="wait_for_pod_exec_or_debug"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # Args
    POD_NAME="$1" && require_vars POD_NAME
    CONTAINER_NAME="$2" && require_vars CONTAINER_NAME
    CONTAINER_TYPE="${3:-container}"
    TIMEOUT=${4:-60}
    
    # Start the time
    START_TIME=$(date +%s)

    # Validate container type
    if [ "$CONTAINER_TYPE" != "initContainer" ] && [ "$CONTAINER_TYPE" != "container" ]; then
      function_print "Error! Container type must be either initContainer or container."
      exit 1
    fi

    # Wait for the pod to be exec ready
    function_print ">> $THIS_COMMAND: Waiting for pod $POD_NAME to be exec ready"
    while true; do
      if [[ "$CONTAINER_TYPE" == "initContainer" ]]; then
        CONTAINER_STARTED="$(kubectl get --namespace=${APP_NAME} pod/$POD_NAME --output jsonpath='{.status.initContainerStatuses[?(@.name=="'$CONTAINER_NAME'")].state.running.startedAt}')"
      else
        CONTAINER_STARTED="$(kubectl get --namespace=${APP_NAME} pod/$POD_NAME --output jsonpath='{.status.containerStatuses[?(@.name=="'$CONTAINER_NAME'")].state.running.startedAt}')"
      fi
      if [[ -n "$CONTAINER_STARTED" ]] && [[ $(kubectl exec --namespace=${APP_NAME} $POD_NAME --container $CONTAINER_NAME -- echo "works") == "works" ]]; then
        function_print ">> $THIS_COMMAND: Pod $POD_NAME is ready for exec"
        break
      else
        sleep 1
        now=$(date +%s)
        if [ $(($now - $START_TIME)) -gt $TIMEOUT ]; then
          function_print "Error! Timeout waiting for pod/$POD_NAME to be exec ready." 
          if ! kubectl get pod --namespace=${APP_NAME} $POD_NAME --output name > /dev/null 2>&1; then
            function_print "Error! Pod $POD_NAME not found."
            exit 1
          else
            function_print "Printing debug pod/$POD_NAME"
            kubectl_list_pods "$THIS_COMMAND"
            kubectl_logs $POD_NAME all "$THIS_COMMAND"
            kubectl_describe $POD_NAME "$THIS_COMMAND"
            kubectl_status $POD_NAME "$THIS_COMMAND"
            kubectl_events "$THIS_COMMAND"
            exit 1
          fi
        fi
      fi
    done
  #
  # Follow pod logs, until the pod finishes
  #
  # Parameters
  # ----------
  # $POD_NAME
  #   (string) Name of the pod to print logs for
  # $TIMEOUT
  #   (int) (Optional) Timeout in seconds
  #   Default value: 60
  #
  kubectl_follow_logs: |-
    FUNCTION_NAME="kubectl_follow_logs"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # Args
    POD_NAME="$1" && require_vars POD_NAME
    TIMEOUT=${2:-60}
    
    # Follow logs in the background
    # Start the time
    START_TIME=$(date +%s)
    # If the pod hasn't been created, wait until it's created (otherwise logs will not be available)
    POD_STATUS="$(kubectl get --namespace=${APP_NAME} pod/$POD_NAME -o jsonpath='{.status.phase}')"
    function_print "Pod $POD_NAME is in $POD_STATUS state."
    if [[ "$POD_STATUS" == "Pending" ]]; then
      function_print "Waiting for pod/$POD_NAME to be created."
      while true; do
        POD_STATUS="$(kubectl get --namespace=${APP_NAME} pod/$POD_NAME -o jsonpath='{.status.phase}')"
        # If pod is not in pending state, break
        if [[ "$POD_STATUS" != "Pending" ]]; then
          function_print "The pod has been created."
          break
        else
          sleep 1
          now=$(date +%s)
          if [ $(($now - $START_TIME)) -gt $TIMEOUT ]; then
            function_print "Error! Timeout waiting for pod/$POD_NAME to be created."
            exit 1
          fi
        fi
      done
    fi
    # Follow logs
    function_print "Following logs for pod/$POD_NAME --all-containers=true"
    kubectl logs --namespace=${APP_NAME} --all-containers=true $POD_NAME --follow &
    sleep 1
    # Wait until complete
    while true; do
      # If pod disappears, stop
      if ! kubectl get pod --namespace=${APP_NAME} $POD_NAME --output name > /dev/null 2>&1; then
        function_print "Pod $POD_NAME no longer exists. Stopping logs."
        break
      fi
      # If the pod is not running, stop
      POD_STATUS="$(kubectl get --namespace=${APP_NAME} pod/$POD_NAME -o jsonpath='{.status.phase}')"
      if [[ "$POD_STATUS" != "Running" ]]; then
        function_print "Pod $POD_NAME is no longer running. Stopping logs."
        break
      fi
      sleep 1
      now=$(date +%s)
      if [ $(($now - $START_TIME)) -gt $TIMEOUT ]; then
        function_print "Error! Timeout waiting for "$FILE_PATH" to appear."
        exit 1
      fi
    done
    # Kill all background processes showing logs
    PIDS="$(ps -A -o pid,args | grep " kubectl logs --namespace=${APP_NAME} --all-containers=true $POD_NAME --follow$" | awk '{print $1}' | sort | uniq)"
    function_print "Killing the log following processes"
    for PID in $PIDS; do
      function_print "Killing PID $PID" 
      kill $PID || true
    done
  #
  # Follow pod logs, until the specified file appears. The caveat is that the logs cannot start until the specified
  # container gets created.
  #
  # Parameters
  # ----------
  # $POD_NAME
  #   (string) Name of the pod to print logs for
  # $CONTAINER
  #   (string) Name of the container which holds the file
  # $FILE_PATH
  #   (string) Absolute path of the file to wait for
  # $TIMEOUT
  #   (int) (Optional) Timeout in seconds
  #   Default value: 60
  #
  kubectl_follow_logs_until_file_appears: |-
    FUNCTION_NAME="kubectl_follow_logs_until_file_appears"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # Args
    POD_NAME="$1" && require_vars POD_NAME
    CONTAINER="$2" && require_vars CONTAINER
    FILE_PATH="$3" && require_vars FILE_PATH
    TIMEOUT=${4:-60}
    
    # Start the time
    START_TIME=$(date +%s)
    
    # Wait until the container is created (otherwise logs will not be available)
    while true; do
      # If no longer waiting, break
      if [[ -z "$(kubectl get --namespace=${APP_NAME} pod/$POD_NAME -o jsonpath='{.status.containerStatuses[?(@.name=="'$CONTAINER'")].state.waiting}')" ]]; then
        function_print "Container $CONTAINER is available.."
        break
      else
        sleep 1
        kubectl get --namespace=${APP_NAME} pod/$POD_NAME -o jsonpath='{.status.containerStatuses[?(@.name=="'$CONTAINER'")].state.waiting}'
        now=$(date +%s)
        if [ $(($now - $START_TIME)) -gt $TIMEOUT ]; then
          function_print "Error! Timeout waiting for container $CONTAINER to start."
          exit 1
        fi
      fi
    done
    
    # Follow logs in the background
    function_print "Following logs for pod/$POD_NAME --all-containers=true"
    kubectl logs --namespace=${APP_NAME} --all-containers=true $POD_NAME --follow &
    sleep 1
    
    # Wait for $FILE_PATH to exist
    while true; do
      # If pod disappears, exit with error
      if ! kubectl get pod --namespace=${APP_NAME} $POD_NAME --output name > /dev/null 2>&1; then
        function_print "Error! Pod $POD_NAME not found. Exiting."
        exit 1
      fi
      # If the pod stops running, exit with error
      POD_STATUS="$(kubectl get --namespace=${APP_NAME} pod/$POD_NAME -o jsonpath='{.status.phase}')"
      if [[ "$POD_STATUS" != "Running" ]]; then
        function_print "Pod $POD_NAME is no longer running. Exiting."
        exit 1
      fi
    
      # If the file appears, break
      if kubectl exec --namespace=${APP_NAME} $POD_NAME --container $CONTAINER -- test -f "$FILE_PATH" 2>/dev/null; then
        function_print "Found $FILE_PATH. Exiting."
        break
      fi
    
      sleep 1
      now=$(date +%s)
      if [ $(($now - $START_TIME)) -gt $TIMEOUT ]; then
        function_print "Error! Timeout waiting for "$FILE_PATH" to appear."
        exit 1
      fi
    done
    # Kill all background processes showing logs
    PIDS="$(ps -A -o pid,args | grep " kubectl logs --namespace=${APP_NAME} --all-containers=true $POD_NAME --follow$" | awk '{print $1}' | sort | uniq)"
    function_print "Killing the log following processes"
    for PID in $PIDS; do
      function_print "Killing PID $PID"
      kill $PID || true
    done
  #
  # List all pods in the namespace
  #
  kubectl_list_pods: |-
    FUNCTION_NAME="kubectl_list_pods"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # List all pods
    function_print "Listing all pods in namespace ${APP_NAME}"
    kubectl get --namespace=${APP_NAME} pods || function_print "Error! Failed to list pods in namespace ${APP_NAME}"
  #
  # Print logs for a pod
  #
  # Parameters
  # ----------
  # $POD_NAME
  #   (string) Name of the pod to print logs for.
  # $CONTAINER
  #   (string) (Optional) Name of the container to print logs for. If "all", it will print logs for all containers.
  #   Default value: all
  #
  kubectl_logs: |-
    FUNCTION_NAME="kubectl_logs"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # Args
    POD_NAME="$1" && require_vars POD_NAME
    CONTAINER="${2:-all}"

    # Set container flag
    if [ "$CONTAINER" == "all" ]; then
      CONTAINER_FLAG="--all-containers=true"
    else
      CONTAINER_FLAG="--container=$CONTAINER"
    fi

    # Print logs
    function_print "Printing logs for pod/$POD_NAME $CONTAINER_FLAG"
    kubectl logs --namespace=${APP_NAME} $CONTAINER_FLAG $POD_NAME || function_print "Error! Failed to print logs for pod/$POD_NAME $CONTAINER_FLAG"
  #
  # Describe pod
  #
  # Parameters
  # ----------
  # $POD_NAME
  #   (string) Name of the pod to describe
  #
  kubectl_describe: |-
    FUNCTION_NAME="kubectl_describe"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # Args
    POD_NAME="$1" && require_vars POD_NAME
    
    # Describe pod
    function_print "Running 'kubectl describe' on pod/$POD_NAME"
    kubectl describe --namespace=${APP_NAME} pod $POD_NAME || function_print "Error! Failed to describe pod/$POD_NAME"
  #
  # Print status for a pod
  #
  # Parameters
  # ----------
  # $POD_NAME
  #   (string) Name of the pod to print status for
  #
  kubectl_status: |-
    FUNCTION_NAME="kubectl_status"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # Args
    POD_NAME="$1" && require_vars POD_NAME

    # Print status
    function_print "Printing status for pod/$POD_NAME"
    kubectl get --namespace=${APP_NAME} pod $POD_NAME --output jsonpath='{.status}' || function_print "Error! Failed to print status for pod/$POD_NAME"
  #
  # Print events for a pod
  #
  kubectl_events: |-
    FUNCTION_NAME="kubectl_events"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # Print events
    function_print "Printing events"
    kubectl get --namespace=${APP_NAME} events || function_print "Error! Failed to print events"
  #
  # Output the pod name or return error
  #
  # Parameters
  # ----------
  # $LABEL
  #   (string) Name of the label, e.g. app.kubernetes.io/component=wordpress
  # $TIMEOUT
  #   (int) (Optional) Timeout in seconds
  #   Default value: 0
  #
  # Returns
  # -------
  # $RESULT
  #   (string) Name of the pod
  #
  get_pod_by_label: |-
    FUNCTION_NAME="get_pod_by_label"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # Args
    LABEL="$1" && require_vars LABEL
    TIMEOUT=${2:-0}
    
    # Get the pod name
    START_TIME=$(date +%s)
    while true; do
      # Retrieve a pod (limit 1) by name, excluding Terminating pods
      POD_NAME=$(kubectl get pod --namespace=${APP_NAME} --selector $LABEL --no-headers 2>/dev/null | awk '$3 != "Terminating" {print $1}' | head -n 1)
      [ -n "$POD_NAME" ] && RESULT="$POD_NAME" && break
      sleep 1
      now=$(date +%s)
      if [ $(($now - $START_TIME)) -gt $TIMEOUT ]; then
        function_print "Error! No pod found with label $LABEL"
        exit 1
      fi
    done
  #
  # Requires the string to start and end with an alphanumeric character, may contain underscores, hyphens or dots, but
  # not repeating dots.
  #
  # Example: validate_filename "my-file-name"
  #
  # Parameters
  # ----------
  # $STR
  #   (string) String to validate
  #
  validate_filename: |-
    FUNCTION_NAME="validate_filename"
    FUNCTION_ARGS="$@"
    function_init
    
    # Args
    STR="$1" && require_vars STR
    
    # Validate the string
    if [[ ! "$STR" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]$ ]]; then
      function_print "Error! Text \"$STR\" is invalid. It must only contain alphanumeric characters, hyphens, underscores or dots."
      exit 1
    fi
    # Must start and end with an alphanumeric character
    if [[ ! "$STR" =~ ^[a-zA-Z0-9]*[a-zA-Z0-9]$ ]]; then
      function_print "Error! Text \"$STR\" is invalid. It must start and end with an alphanumeric character."
      exit 1
    fi
    # Must not repeat dots
    if [[ "$STR" =~ \.\. ]]; then
      function_print "Error! Text \"$STR\" is invalid. It must not contain repeating dots."
      exit 1
    fi
  #
  # Requires the string to start end with an alphanumeric character, and may contain hyphens.
  #
  # Example: validate_filename "my-file-name"
  #
  # Parameters
  # ----------
  # $STR
  #   (string) String to validate
  #
  validate_namespace: |-
    FUNCTION_NAME="validate_namespace"
    FUNCTION_ARGS="$@"
    RESULT=""
    function_init
    
    # Args
    STR="$1" && require_vars STR
    
    # Validate the string
    if [[ ! "$STR" =~ ^[a-zA-Z0-9-]*$ ]]; then
      function_print "Error! Text \"$STR\" is invalid. It must only contain alphanumeric characters and hyphens."
      exit 1
    fi
    # Must start and end with an alphanumeric character
    if [[ ! "$STR" =~ ^[a-zA-Z0-9]*[a-zA-Z0-9]$ ]]; then
      function_print "Error! Text \"$STR\" is invalid. It must start and end with an alphanumeric character."
      exit 1
    fi
    # Must not be longer than 253 characters
    if [[ ${#STR} -gt 253 ]]; then
      function_print "Error! Text \"$STR\" is invalid. It must not be longer than 253 characters."
      exit 1
    fi
commands:
  # Keep all commands restricted to the dev environment. Production workflows must use pipelines.
  # Each command must start with
  # [ -n "${DEVSPACE_PROFILE}" ] && echo "Error! Commands must be run in Dev environment only." && exit 1
  reset:
    description: Resets the deployment by deleting the namespace from the kubernetes instance.
    command: |-
      [ -n "${DEVSPACE_PROFILE}" ] && echo "Error! Commands must be run in Dev environment only." && exit 1
      echo "Deleting the namespace. This may take 30-60 seconds."
      kubectl --ignore-not-found=true delete namespace ${APP_NAME}

require:
  commands:
    # kubectl command
    - name: kubectl
      versionRegEx: "Client Version: (v?\\d+\\.\\d+\\.\\d+)"
      version: ">=v1.28"
    # kubernetes instance
    - name: kubectl
      versionRegEx: "Server Version: (v?\\d+\\.\\d+\\.\\d+)"
      version: ">=v1.28"
    # helm command
    - name: helm
      versionRegEx: "version.BuildInfo{Version:\"v(\\d+\\.\\d+\\.\\d+)\""
      version: ">=v3.7.0"
vars:
  DEVSPACE_ENV_FILE: ".env"
  # Get project root directory, Windows compatible
  PROJECT_ROOT_DIR:
    command: pwd
    commands:
      - os: windows
        command: wsl --exec pwd
  # DevSpace Settings
  APP_NAME:
    # Default to Repo Name
    command: basename -s .git $(git config --get remote.origin.url)
    commands:
      - os: windows
        command: wsl --exec basename -s .git $(git config --get remote.origin.url)